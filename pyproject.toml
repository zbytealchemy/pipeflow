[tool.poetry]
name = "pipeflow"
version = "0.1.0"
description = "A type-safe, async-first data processing pipeline framework"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "pipeflow", from = "src"}]
license = "MIT"
homepage = "https://github.com/zbytealchemy/pipeflow"
repository = "https://github.com/zbytealchemy/pipeflow"
documentation = "https://zbytealchemy.github.io/pipeflow"
keywords = [
    "pipeline",
    "data processing",
    "async",
    "type-safe",
    "streaming",
    "etl",
    "data engineering"
]

[tool.poetry.dependencies]
python = "^3.10"
pydantic = "^2.5.1"
prefect = "^2.14.3"
pandas = "^2.1.3"
python-multipart = "^0.0.6"
griffe = "^0.38.1"
"ruamel.yaml" = { version = "^0.18.5", extras = ["py.typed"] }
rich = "^13.7.0"
redis = { version = "^5.0.1", extras = ["hiredis"] }
hiredis = { version = "^2.3.2", optional = true }
confluent-kafka = { version = "^2.3.0", optional = true }
pika = { version = "^1.3.0", optional = true }

[tool.poetry.extras]
kafka = ["confluent-kafka"]
rabbitmq = ["pika"]
all = ["confluent-kafka", "pika"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
mypy = "^1.7.1"
black = "^23.11.0"
isort = "^5.12.0"
ruff = "^0.1.6"
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.3"
types-aiobotocore = "^2.15.2.post3"
types-aiobotocore-sqs = "^2.15.2"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=pipeflow --cov-report=term-missing"
markers = [
    "integration: marks tests that require external services",
]

[tool.mypy]
plugins = []

["mypy-aioboto3.*"]
ignore_missing_imports = true

python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["prefect.*", "aiokafka.*", "aio_pika.*", "ruamel.*", "redis.*"]
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

